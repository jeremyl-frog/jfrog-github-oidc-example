name: "JFrog-GitHub OIDC POC via REST"
on:
  workflow_dispatch:

permissions:
  id-token: write

jobs:
  build:
    runs-on: self-hosted
    env:
      OIDC_TOKEN_PATH: ${{ secrets.OIDC_TOKEN_PATH }}
      OIDC_AUDIENCE: 'jl-github-ci'         # must match your JFrog OIDC audience
      OIDC_PROVIDER: 'jl-github-ci'         # must match the provider configured in JFrog
      JF_URL: ${{ secrets.CLOUD_JF_URL }}   # GitHub Actions secret for your JFrog base URL
      JF_REPO: 'jl-local'                   # your Artifactory repo key

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get and inspect GitHub OIDC token
        run: |
          # Fetch GitHub OIDC token from GitHubâ€™s OIDC endpoint
          ID_TOKEN=$(curl -sLS \
            -H "User-Agent: actions/oidc-client" \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=$OIDC_AUDIENCE" \
            | jq -r .value)
            
          # Print token for immediate testing in the Token Exchange API          
          echo "Token String > $OIDC_TOKEN_PATH"
          echo "$ID_TOKEN" > $OIDC_TOKEN_PATH
          echo "ID_TOKEN=$ID_TOKEN" >> $GITHUB_ENV

          # Decode JWT payload to inspect claims
          PAYLOAD=$(echo "$ID_TOKEN" \
            | cut -d '.' -f2 \
            | tr '_-' '/+' \
            | awk '{ l=length($0)%4; if (l>0) print $0 substr("====",1,4-l); else print $0; }' \
            | base64 -D \
            | jq .)

          echo "Decoded OIDC claims:"
          echo "$PAYLOAD"

      - name: Exchange OIDC token for JFrog access token
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
        run: |
          ACCESS_TOKEN=$(curl -sLS -X POST "$JF_URL/access/api/v1/oidc/token" \
            -H "Content-Type: application/json" \
            -d "{
              \"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\",
              \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\",
              \"subject_token\": \"$ID_TOKEN\",
              \"provider_name\": \"$OIDC_PROVIDER\"
            }" \
            | jq -r .access_token)

          # --- Decode the access token and save to file ---
          PAYLOAD=$(echo "$ACCESS_TOKEN" | cut -d '.' -f2)
          decode_base64url() {
            local input=$1
            input=$(echo "$input" | sed 's/-/+/g; s/_/\//g')
            padding_length=$((4 - ${#input} % 4))
            if [ $padding_length -lt 4 ]; then
              input="${input}$(printf '====' | cut -c1-$padding_length)"
            fi
            echo "$input" | base64 --decode 2>/dev/null
          }
          DECODED_PAYLOAD=$(decode_base64url "$PAYLOAD" | jq .)
          echo "$DECODED_PAYLOAD" > /Users/jeremyl/Desktop/Projects/github-actions-runner/sandbox/access-token-decoded.txt
          echo "Decoded access token written to sandbox/access-token-decoded.txt" 
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$ACCESS_TOKEN"

      - name: Create dummy artifact
        run: echo "hello jfrog" > oidc-poc

      - name: Deploy to Artifactory
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          curl -sLS \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -T oidc-poc \
            "$JF_URL/artifactory/$JF_REPO/oidc-poc-$(date +%Y%m%d%H%M%S)"
